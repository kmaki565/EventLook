<Window x:Class="EventLook.View.MainWindow"
        Name="_window"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit" 
        xmlns:v="clr-namespace:EventLook.View"
        xmlns:viewmodel="clr-namespace:EventLook.ViewModel"
        xmlns:properties="clr-namespace:EventLook.Properties"
        d:DataContext="{d:DesignInstance Type=viewmodel:MainViewModel}"
        mc:Ignorable="d"
        ResizeMode="CanResizeWithGrip"
        PreviewKeyDown="Window_PreviewKeyDown"
        d:DesignHeight="640"
        d:DesignWidth="1100"
        Height="{Binding Source={x:Static properties:Settings.Default}, Path=WinHeight, Mode=TwoWay}"
        Width="{Binding Source={x:Static properties:Settings.Default}, Path=WinWidth, Mode=TwoWay}"
        WindowStartupLocation="CenterScreen"
        Closing="Window_Closing">
    <Window.Style>
        <Style TargetType="Window">
            <Style.Triggers>
                <DataTrigger Binding="{Binding IsRunAsAdmin}" Value="False">
                    <Setter Property="Title" Value="{Binding SelectedLogSource.Path, StringFormat={}{0} - EventLook}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding IsRunAsAdmin}" Value="True">
                    <Setter Property="Title" Value="{Binding SelectedLogSource.Path, StringFormat={}{0} - EventLook (Administrator)}"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>
    </Window.Style>
    <Window.Resources>
        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
        <v:InverseBooleanToVisibilityConverter x:Key="InverseBooleanToVisibilityConverter"/>
        <v:EventLevelToDisplayTextConverter x:Key="EventLevelToDisplayTextConverter"/>
        <v:EventLevelToImageConverter x:Key="EventLevelToImageConv"
                                     CriticalIconPath="/Asset/StatusCriticalError_16x.png"
                                     ErrorIconPath="/Asset/StatusInvalid_16x.png"
                                     WarningIconPath="/Asset/StatusWarning_16x.png"
                                     InformationIconPath="/Asset/StatusInformationOutline_16x.png"
                                     VerboseIconPath="/Asset/StatusInformation_16x.png"
                                     UnknownIconPath="/Asset/StatusHidden_16x.png"/>
        <v:ExpandedToGridLengthConverter x:Key="ExpandedToGridLengthConverter"/>
        <v:InverseBooleanConverter x:Key="InverseBooleanConverter" />
        <v:UtcToAnotherTimeZoneStringConverter x:Key="UtcToAnotherTimeZoneStringConverter"/>
        <v:TimeZoneToOffsetTextConverter x:Key="TimeZoneToOffsetTextConverter"/>
        <v:StatusTextConverter x:Key="StatusTextConverter"/>
        <v:FilterInfoTextConverter x:Key="FilterInfoTextConverter"/>
        <v:SelectedEventsTextConverter x:Key="SelectedEventsTextConverter"/>
        <!-- This next line instantiates a CollectionViewSource with the collection of Events as its collection of objects-->
        <CollectionViewSource Source="{Binding Events}" x:Key="X_CVS"/>
        <DataGridTextColumn x:Key="RecordIdColumn" Header="Record ID" Binding="{Binding Record.RecordId}" Visibility="{Binding DataContext.ShowsRecordId, Source={x:Reference _window}, Converter={StaticResource BooleanToVisibilityConverter}}"/>
    </Window.Resources>
    <Window.InputBindings>
        <KeyBinding Key="F5" Command="{Binding RefreshCommand}"/>
        <KeyBinding Key="F5" Modifiers="Shift" Command="{Binding CancelCommand}"/>
        <KeyBinding Key="L" Modifiers="Ctrl" Command="{Binding OpenLogPickerCommand}"/>
        <KeyBinding Key="O" Modifiers="Ctrl" Command="{Binding OpenFileCommand}"/>
        <KeyBinding Key="S" Modifiers="Ctrl" Command="{Binding ExportToCsvCommand}"/>
    </Window.InputBindings>
    
    <DockPanel>
        <Menu DockPanel.Dock="Top" Background="White">
            <MenuItem Header="_File">
                <MenuItem Header="Open Event _Log on local computer" InputGestureText="Ctrl+L" Command="{Binding OpenLogPickerCommand}"/>
                <MenuItem Header="_Open .evtx File" InputGestureText="Ctrl+O" Command="{Binding OpenFileCommand}"/>
                <MenuItem Header="Export to C_SV file" InputGestureText="Ctrl+S" Command="{Binding ExportToCsvCommand}"/>
                <Separator />
                <MenuItem Header="Launch Windows _Event Viewer" Command="{Binding LaunchEventViewerCommand}"/>
                <MenuItem Header="Restart app as _Administrator" Command="{Binding RunAsAdminCommand}" Visibility="{Binding IsRunAsAdmin, Converter={StaticResource InverseBooleanToVisibilityConverter}}"/>
                <Separator />
                <MenuItem Header="E_xit" Command="{Binding ExitCommand}" />
            </MenuItem>
            <MenuItem Header="_Options">
                <MenuItem Header="_Auto Refresh" IsCheckable="True" IsChecked="{Binding IsAutoRefreshEnabled}"/>
                <Separator />
                <MenuItem Header="_Settings..." Command="{Binding OpenSettingsCommand}" />
            </MenuItem> 
            <MenuItem Header="_About" Click="MenuItem_About_Click"/>
        </Menu>
        <StatusBar DockPanel.Dock="Bottom" Background="WhiteSmoke">
            <StatusBarItem>
                <StackPanel Orientation="Horizontal">
                    <TextBlock>
                        <TextBlock.Text>
                            <MultiBinding Converter="{StaticResource StatusTextConverter}">
                                <Binding Path="IsUpdating"/>
                                <Binding Path="IsAutoRefreshing"/>
                                <Binding Path="IsAppend"/>
                                <Binding Path="LoadedEventCount"/>
                                <Binding Path="TotalEventCount"/>
                                <Binding Path="AppendCount"/>
                                <Binding Path="LastElapsedTime"/>
                                <Binding Path="ErrorMessage"/>
                            </MultiBinding>
                        </TextBlock.Text>
                    </TextBlock>
                    <TextBlock>
                        <TextBlock.Text>
                            <MultiBinding Converter="{StaticResource FilterInfoTextConverter}">
                                <Binding Path="IsUpdating"/>
                                <Binding Path="AreEventsFiltered"/>
                                <Binding Path="VisibleEventCount"/>
                            </MultiBinding>
                        </TextBlock.Text>
                    </TextBlock>
                </StackPanel>
            </StatusBarItem>
            <StatusBarItem HorizontalAlignment="Right" Margin="10,0">
                <TextBlock Text="{Binding ElementName=dataGrid1, Path=SelectedItems.Count, Converter={StaticResource SelectedEventsTextConverter}}"/>
            </StatusBarItem>
        </StatusBar>

        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="35"/>
                <RowDefinition Height="{Binding ElementName=Ex1, Path=IsExpanded, Converter={StaticResource ExpandedToGridLengthConverter}, ConverterParameter=25}" />
                <RowDefinition/>
            </Grid.RowDefinitions>

            <StackPanel Grid.Row="0" Orientation="Horizontal" Margin="0,5,0,5">
                <ComboBox  
                  x:Name="ComboBox_Source" ItemsSource="{Binding LogSources}" SelectedItem="{Binding SelectedLogSource}"
                  DisplayMemberPath="DisplayName" SelectedValuePath="Path" 
                  HorizontalAlignment="Left" Margin="10,0,0,0" MinWidth="250" />
                <ComboBox  
                      ItemsSource="{Binding Ranges}" SelectedItem="{Binding SelectedRange}"
                      DisplayMemberPath="Text" SelectedValuePath="Text"
                      HorizontalAlignment="Left" Margin="10,0,0,0" MinWidth="100" />
                <TextBlock Text="From:" Margin="10,0,0,0" VerticalAlignment="Center" HorizontalAlignment="Right"/>
                <xctk:DateTimePicker Margin="8,0,0,0" MinWidth="160" 
                                 AutoCloseCalendar="True" 
                                 IsReadOnly="{Binding SelectedRange.IsCustom, Converter={StaticResource InverseBooleanConverter}}"
                                 Value="{Binding FromDateTime, Mode=TwoWay, UpdateSourceTrigger=LostFocus}" 
                                 Format="Custom" FormatString="yyyy-MM-dd HH:mm (z)"/>
                <TextBlock Text="To:" Margin="8,0,0,0" VerticalAlignment="Center" HorizontalAlignment="Right"/>
                <xctk:DateTimePicker Margin="8,0,0,0" MinWidth="160"
                                 AutoCloseCalendar="True"
                                 IsReadOnly="{Binding SelectedRange.IsCustom, Converter={StaticResource InverseBooleanConverter}}"
                                 Value="{Binding ToDateTime, Mode=TwoWay, UpdateSourceTrigger=LostFocus}" 
                                 Format="Custom" FormatString="yyyy-MM-dd HH:mm (z)"/>
                <ComboBox
                    ItemsSource="{Binding TimeZones}" SelectedItem="{Binding SelectedTimeZone}"
                    DisplayMemberPath="DisplayName"
                    Margin="10,0,0,0" Width="93"/>
                <Button x:Name="refreshButton" Margin="15,0,0,0" Width="25" Height="25">
                    <Button.Style>
                        <Style TargetType="Button">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding IsUpdating}" Value="False">
                                    <Setter Property="Command" Value="{Binding RefreshCommand, Mode=OneWay}"/>
                                    <Setter Property="FontFamily" Value="{StaticResource WingDings3}"/>
                                    <Setter Property="Content" Value="P" />
                                    <Setter Property="ToolTip" Value="Refresh (F5)"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding IsUpdating}" Value="True">
                                    <Setter Property="Command" Value="{Binding CancelCommand, Mode=OneWay}"/>
                                    <Setter Property="FontFamily" Value="Verdana"/>
                                    <Setter Property="Content" Value="X" />
                                    <Setter Property="ToolTip" Value="Stop (Shift+F5)"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Style>
                </Button>
                <CheckBox Content="_Truncate long text" Margin="20,0,0,0" VerticalAlignment="Center" x:Name="CheckTruncate" IsChecked="True" Click="CheckTruncate_Click"/>
            </StackPanel>

            <Expander x:Name="Ex1" Header="F_ilters" Grid.Row="1" Margin="10,0,0,0" ExpandDirection="Down">
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="Provider: " Margin="5,0,0,0" VerticalAlignment="Center"/>
                    <xctk:CheckComboBox Width="250" 
                            IsSelectAllActive="True" IsAllItemsSelectedContentActive="True"
                            Delimiter=", "
                            ItemsSource="{Binding SourceFilters}" DisplayMemberPath="Name" SelectedMemberPath="Selected"
                            Command="{Binding ApplySourceFilterCommand}"/>
                    <TextBlock Text="Level: " Margin="10,0,0,0" VerticalAlignment="Center"/>
                    <xctk:CheckComboBox Width="120" 
                            IsSelectAllActive="True" IsAllItemsSelectedContentActive="True"
                            Delimiter=", "
                            ItemsSource="{Binding LevelFilters}" SelectedMemberPath="Selected"
                            Command="{Binding ApplyLevelFilterCommand}"/>
                    <TextBlock Text="Event ID: " Margin="10,0,0,0" VerticalAlignment="Center"/>
                    <TextBox Text="{Binding IdFilter.IdFilterNum, TargetNullValue='', Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, Delay=300}"
                             v:TextBoxBehavior.EscapeClearsText="True"
                             Width="50" VerticalContentAlignment="Center" />
                    <TextBlock Text="Message contains: " Margin="10,0,0,0" VerticalAlignment="Center"/>
                    <TextBox x:Name="textBoxMsgFilter" Text="{Binding MsgFilter.MessageFilterText, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, Delay=300}"
                             v:TextBoxBehavior.EscapeClearsText="True"
                             MinWidth="200" VerticalContentAlignment="Center" />
                    <Button Content="Reset filters" Height="25" Width="70" Margin="15,0,0,0" Command="{Binding ResetFiltersCommand, Mode=OneWay}"/>
                </StackPanel>
            </Expander>

            <!-- *** The ItemsSource of the data grid is bound to the CollectionViewSource object that was instantiated above -->
            <DataGrid x:Name="dataGrid1" ItemsSource="{Binding Source={StaticResource X_CVS}}" 
                      SelectedItem="{Binding SelectedEventItem}" SelectedCellsChanged="DataGrid_SelectedCellsChanged"
                      Margin="5" Grid.Row="2" AutoGenerateColumns="False" IsReadOnly="True"
                      AllowDrop="True" PreviewDragOver="OnPreviewDragOver" Drop="OnDrop">
                <DataGrid.Resources>
                    <ContextMenu x:Key="dataGridContextMenu">
                        <ContextMenu.Items>
                            <MenuItem Header="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget.DataContext.Record.ProviderName}" HeaderStringFormat="Filter to &quot;{0}&quot;"
                                      Command="{Binding DataContext.FilterToSelectedSourceCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=DataGrid}}"/>
                            <MenuItem Header="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget.DataContext.Record.ProviderName}" HeaderStringFormat="Exclude &quot;{0}&quot;" 
                                      Command="{Binding DataContext.ExcludeSelectedSourceCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=DataGrid}}"/>
                            <Separator/>
                            <MenuItem Header="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget.DataContext.Record.Level, Converter={StaticResource EventLevelToDisplayTextConverter}}" HeaderStringFormat="Filter to {0}"
                                      Command="{Binding DataContext.FilterToSelectedLevelCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=DataGrid}}"/>
                            <MenuItem Header="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget.DataContext.Record.Level, Converter={StaticResource EventLevelToDisplayTextConverter}}" HeaderStringFormat="Exclude {0}"
                                      Command="{Binding DataContext.ExcludeSelectedLevelCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=DataGrid}}"/>
                            <Separator/>
                            <MenuItem Header="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget.DataContext.Record.Id}" HeaderStringFormat="Filter to ID {0}"
                                      Command="{Binding DataContext.FilterToSelectedIdCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=DataGrid}}"/>
                            <Separator/>
                            <MenuItem Header="Reset filters" Command="{Binding DataContext.ResetFiltersCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=DataGrid}}"/>
                            <Separator/>
                            <MenuItem Header="Copy Message text" Command="{Binding DataContext.CopyMessageTextCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=DataGrid}}"/>
                        </ContextMenu.Items>
                    </ContextMenu>
                </DataGrid.Resources>
                <DataGrid.CellStyle>
                    <Style TargetType="DataGridCell">
                        <Setter Property="BorderThickness" Value="0"/>
                        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                    </Style>
                </DataGrid.CellStyle>
                <DataGrid.RowStyle>
                    <Style TargetType="DataGridRow">
                        <Setter Property="ContextMenu" Value="{StaticResource dataGridContextMenu}" />
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding IsNewLoaded}" Value="True">
                                <Setter Property="Background" Value="Yellow"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </DataGrid.RowStyle>
                <DataGrid.InputBindings>
                    <MouseBinding Gesture="LeftDoubleClick" Command="{Binding OpenDetailsCommand}" />
                    <KeyBinding Key="Enter" Command="{Binding OpenDetailsCommand}" />
                </DataGrid.InputBindings>
                <DataGrid.Columns>
                    <StaticResource ResourceKey="RecordIdColumn"/>
                    <DataGridTextColumn SortMemberPath="TimeOfEvent">
                        <DataGridTextColumn.Binding>
                            <MultiBinding Converter="{StaticResource UtcToAnotherTimeZoneStringConverter}">
                                <Binding Path="TimeOfEvent"/>
                                <Binding Path="DataContext.SelectedTimeZone" RelativeSource="{RelativeSource AncestorType=DataGrid}"/>
                                <Binding Path="DataContext.ShowsMillisec" RelativeSource="{RelativeSource AncestorType=DataGrid}"/>
                            </MultiBinding>
                        </DataGridTextColumn.Binding>
                        <DataGridTextColumn.HeaderTemplate>
                            <DataTemplate>
                                <TextBlock Text="{Binding DataContext.SelectedTimeZone, RelativeSource={RelativeSource AncestorType=DataGrid}, Converter={StaticResource TimeZoneToOffsetTextConverter}, StringFormat=Time of event ({0})}"/>
                            </DataTemplate>
                        </DataGridTextColumn.HeaderTemplate>
                    </DataGridTextColumn>
                    <DataGridTextColumn Header="Provider" Binding="{Binding Record.ProviderName}" Width="200">
                        <DataGridTextColumn.ElementStyle>
                            <Style TargetType="TextBlock">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding IsChecked, Source={x:Reference CheckTruncate}}" Value="False">
                                        <Setter Property="TextWrapping" Value="Wrap" />
                                        <Setter Property="TextTrimming" Value="None" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding IsChecked, Source={x:Reference CheckTruncate}}" Value="True">
                                        <Setter Property="TextWrapping" Value="NoWrap" />
                                        <Setter Property="TextTrimming" Value="CharacterEllipsis" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </DataGridTextColumn.ElementStyle>
                    </DataGridTextColumn>
                    <DataGridTemplateColumn Header="Level" SortMemberPath="Record.Level">
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <StackPanel Orientation="Horizontal" VerticalAlignment="Top">
                                    <Image Source="{Binding Path=Record.Level, Converter={StaticResource EventLevelToImageConv}}" Margin="1,0"/>
                                    <TextBlock Text="{Binding Path=Record.Level, Converter={StaticResource EventLevelToDisplayTextConverter}}" Margin="1,0"/>
                                </StackPanel>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>
                    <DataGridTextColumn Header="Event ID" Binding="{Binding Record.Id}"/>
                    <DataGridTextColumn Header="Message" Binding="{Binding Message}" Width="*" Visibility="{Binding IsChecked, Source={x:Reference CheckTruncate}, Converter={StaticResource InverseBooleanToVisibilityConverter}}">
                        <DataGridTextColumn.ElementStyle>
                            <Style TargetType="TextBlock">
                                <Setter Property="TextWrapping" Value="Wrap" />
                            </Style>
                        </DataGridTextColumn.ElementStyle>
                    </DataGridTextColumn>
                    <DataGridTextColumn Header="Message" Binding="{Binding MessageOneLine}" Width="*" Visibility="{Binding IsChecked, Source={x:Reference CheckTruncate}, Converter={StaticResource BooleanToVisibilityConverter}}">
                        <DataGridTextColumn.ElementStyle>
                            <Style TargetType="TextBlock">
                                <Setter Property="TextTrimming" Value="CharacterEllipsis" />
                            </Style>
                        </DataGridTextColumn.ElementStyle>
                    </DataGridTextColumn>
                </DataGrid.Columns>
            </DataGrid>

        </Grid>
    </DockPanel>
</Window>
